<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Modbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Modbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Wed Aug 15 20:56:55 2018
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Blux_v3bPoll &rArr; B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c08a8c]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1c06a70]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1c0731c]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1c07754]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1c076a0]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1c076dc]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1c07718]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1c083fc]">eMBFuncReadCoils</a>
 <LI><a href="#[1c083c0]">eMBFuncWriteCoil</a>
 <LI><a href="#[1c08384]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1c07f10]">eMBFuncReadDiscreteInputs</a>
 <LI><a href="#[283d94c]">Reset_Handler</a>
 <LI><a href="#[283d910]">NMI_Handler</a>
 <LI><a href="#[283d8d4]">HardFault_Handler</a>
 <LI><a href="#[283d898]">SVC_Handler</a>
 <LI><a href="#[283d85c]">PendSV_Handler</a>
 <LI><a href="#[283d820]">SysTick_Handler</a>
 <LI><a href="#[283d730]">BOD_IRQHandler</a>
 <LI><a href="#[283d2bc]">WDT_IRQHandler</a>
 <LI><a href="#[283d6f4]">EINT0_IRQHandler</a>
 <LI><a href="#[283d6b8]">EINT1_IRQHandler</a>
 <LI><a href="#[283d67c]">GPIOP0P1_IRQHandler</a>
 <LI><a href="#[283d640]">GPIOP2P3P4_IRQHandler</a>
 <LI><a href="#[283d58c]">PWMA_IRQHandler</a>
 <LI><a href="#[283d550]">PWMB_IRQHandler</a>
 <LI><a href="#[283d424]">TMR0_IRQHandler</a>
 <LI><a href="#[1c0c68c]">TMR1_IRQHandler</a>
 <LI><a href="#[2839734]">TMR2_IRQHandler</a>
 <LI><a href="#[283d370]">TMR3_IRQHandler</a>
 <LI><a href="#[1c0dc58]">UART0_IRQHandler</a>
 <LI><a href="#[28396f8]">UART1_IRQHandler</a>
 <LI><a href="#[283d49c]">SPI0_IRQHandler</a>
 <LI><a href="#[283d460]">SPI1_IRQHandler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283d604]">I2C0_IRQHandler</a>
 <LI><a href="#[28c61b8]">I2C1_IRQHandler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283d7e4]">ACMP01_IRQHandler</a>
 <LI><a href="#[283d7a8]">ACMP23_IRQHandler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283d514]">PWRWU_IRQHandler</a>
 <LI><a href="#[283d76c]">ADC_IRQHandler</a>
 <LI><a href="#[283daf0]">Default_Handler</a>
 <LI><a href="#[283d4d8]">RTC_IRQHandler</a>
 <LI><a href="#[1c1073c]">main</a>
 <LI><a href="#[283d9c4]">SystemInit</a>
 <LI><a href="#[28c4a84]">__main</a>
 <LI><a href="#[1c09248]">eMBRTUStart</a>
 <LI><a href="#[1c0920c]">eMBRTUStop</a>
 <LI><a href="#[1c09284]">eMBRTUSend</a>
 <LI><a href="#[1c092c0]">eMBRTUReceive</a>
 <LI><a href="#[1c09194]">xMBRTUReceiveFSM</a>
 <LI><a href="#[1c0911c]">xMBRTUTransmitFSM</a>
 <LI><a href="#[1c09158]">xMBRTUTimerT35Expired</a>
 <LI><a href="#[1c08a8c]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1c06a70]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1c0731c]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1c07754]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1c076a0]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1c076dc]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1c07718]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1c083fc]">eMBFuncReadCoils</a>
 <LI><a href="#[1c083c0]">eMBFuncWriteCoil</a>
 <LI><a href="#[1c08384]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1c07f10]">eMBFuncReadDiscreteInputs</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28c4a84]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[28c33c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28c329c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28c2cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28c3260]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28c2cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28c3170]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[283d94c]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[283d910]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d8d4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d898]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d85c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d820]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d7e4]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d7a8]"></a>ACMP23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d76c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d730]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d6f4]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d6b8]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d67c]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d640]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d604]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d58c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d550]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d514]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d4d8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d49c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d460]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d424]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d370]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283d2bc]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28c47b4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[28c4778]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1c0c59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1c103b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1c103f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[283ca88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[283ef18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[28c4688]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c06a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[28c464c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28409d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[28c4610]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[28c60c8]"></a>__aeabi_dmul</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c6014]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28c3788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c6050]"></a>__aeabi_f2uiz</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c608c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c6104]"></a>__aeabi_d2f</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[28c3530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c3080]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[28c3530]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[28c3788]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[28c2e64]"></a>_double_round</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28c3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28c3878]"></a>_double_epilogue</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c2978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28c2aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28c2e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[28c2e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28c60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[28c2cc0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28c3260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28c329c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28c2c84]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[28c2aa4]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[28c3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28c2a68]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[28c2978]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28c293c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28c2504]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28c24c8]"></a>__decompress1</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28c64c4]"></a>B_LUX_Delay5us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Delay5us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[28c626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Stop
<LI><a href="#[28c62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Start
<LI><a href="#[28c6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
<LI><a href="#[28c635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendACK
<LI><a href="#[28c6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvByte
<LI><a href="#[28c63d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvACK
</UL>

<P><STRONG><a name="[28c6488]"></a>B_LUX_GetLux</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, blux_v30b.o(i.B_LUX_GetLux))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[28c6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[28c608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28c6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_delay_nms
<LI><a href="#[28c626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Stop
<LI><a href="#[28c62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Start
<LI><a href="#[28c6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
<LI><a href="#[28c635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendACK
<LI><a href="#[28c6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blux_v3bPoll
</UL>

<P><STRONG><a name="[28c63d4]"></a>B_LUX_RecvACK</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_RecvACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_RecvACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
</UL>

<P><STRONG><a name="[28c6398]"></a>B_LUX_RecvByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = B_LUX_RecvByte &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c635c]"></a>B_LUX_SendACK</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_SendACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c6320]"></a>B_LUX_SendByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = B_LUX_SendByte &rArr; B_LUX_RecvACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c63d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvACK
<LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c62a8]"></a>B_LUX_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_Start &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c626c]"></a>B_LUX_Stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_Stop &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[28c6230]"></a>B_LUX_delay_nms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_delay_nms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_delay_nms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[1c10700]"></a>Blux_v3bPoll</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, blux_v30b.o(i.Blux_v3bPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Blux_v3bPoll &rArr; B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c0daf0]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1c0dab4]"></a>CLK_SetModuleClock</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1c106c4]"></a>CLK_WaitClockReady</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[1c107b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2836db8]"></a>Check_si4432_HW</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4432.o(i.Check_si4432_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_si4432_HW &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[1c10688]"></a>Co2EventPoll</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uart3th.o(i.Co2EventPoll))
<BR><BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1064c]"></a>Co2Init</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, uart3th.o(i.Co2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Co2Init &rArr; x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2839590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
<LI><a href="#[283e93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c10610]"></a>Co2SendCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart3th.o(i.Co2SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Co2SendCmd &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[283e93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c10598]"></a>DHT11EventPoll</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hdt11.o(i.DHT11EventPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DHT11EventPoll &rArr; Read_HDT11 &rArr; Read_8byte_data
</UL>
<BR>[Calls]<UL><LI><a href="#[283899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDT11
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2838a14]"></a>Delayms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hdt11.o(i.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[283899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDT11
</UL>

<P><STRONG><a name="[1c107f0]"></a>DrvSYS_Delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.DrvSYS_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1c102c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[2836b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[283899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDT11
<LI><a href="#[28389d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_8byte_data
<LI><a href="#[2838a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[28c6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_delay_nms
<LI><a href="#[28c64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>

<P><STRONG><a name="[1c0fcb0]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1c0920c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1c09248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1c09284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1c092c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1c0fc74]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1c0920c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1c09248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1c09284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1c092c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1c71a3c]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[1c104e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[28c4ca0]"></a>FMC_EraseData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_EraseData))
<BR><BR>[Called By]<UL><LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1c7185c]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[1c104e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[28c4c64]"></a>FMC_ReadData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1c104e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[28c4c28]"></a>FMC_WriteData</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1c70e0c]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c102c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[1c10520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBLUX_V30
</UL>

<P><STRONG><a name="[1c1055c]"></a>HWRealyInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, realyctrl.o(i.HWRealyInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c61b8]"></a>I2C1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, blux_v30b.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6f00c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1c6f00c]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[28c61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[1c10520]"></a>InitBLUX_V30</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, blux_v30b.o(i.InitBLUX_V30))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitBLUX_V30 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c70e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c104e4]"></a>InitSlaveAddr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fmc_data_flash.o(i.InitSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7185c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1c71a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[28c4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2836d7c]"></a>ProcesBoadcast</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, si4432.o(i.ProcesBoadcast))
<BR><BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[2836d40]"></a>ProcesMyselfFun</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, si4432.o(i.ProcesMyselfFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ProcesMyselfFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[2836d04]"></a>RE_RSSI</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, si4432.o(i.RE_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RE_RSSI &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
<LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[28389d8]"></a>Read_8byte_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hdt11.o(i.Read_8byte_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_8byte_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[283899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDT11
</UL>

<P><STRONG><a name="[283899c]"></a>Read_HDT11</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, hdt11.o(i.Read_HDT11))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_HDT11 &rArr; Read_8byte_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[28389d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_8byte_data
<LI><a href="#[2838a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11EventPoll
</UL>

<P><STRONG><a name="[2836cc8]"></a>SI4432_init</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, si4432.o(i.SI4432_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[2836c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[2836c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
</UL>
<BR>[Called By]<UL><LI><a href="#[1c102c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[2836b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[1c107b4]"></a>SYS_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c103f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1c106c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2841ba0]"></a>SYS_ResetCPU</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetCPU))
<BR><BR>[Called By]<UL><LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1c104a8]"></a>SYS_ResetModule</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[28c4bec]"></a>SaveUserSlaveAddr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fmc_data_flash.o(i.SaveUserSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveUserSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7185c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1c71a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[2841ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
<LI><a href="#[28c4c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteData
<LI><a href="#[28c4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
<LI><a href="#[28c4ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseData
<LI><a href="#[28c5060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
</UL>

<P><STRONG><a name="[28c4bb0]"></a>SaveUserSlaveRfChl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fmc_data_flash.o(i.SaveUserSlaveRfChl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveUserSlaveRfChl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7185c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1c71a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[2841ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
<LI><a href="#[28c4c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteData
<LI><a href="#[28c4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
<LI><a href="#[28c4ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseData
<LI><a href="#[28c5060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
</UL>

<P><STRONG><a name="[2836c8c]"></a>Si4432RegisterSetV26</STRONG> (Thumb, 852 bytes, Stack size 8 bytes, si4432.o(i.Si4432RegisterSetV26))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c77784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[2836cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>

<P><STRONG><a name="[1c1046c]"></a>Si4432Thread</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, si4432.o(i.Si4432Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Si4432Thread &rArr; tx_data &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[2836d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
<LI><a href="#[2836d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcesMyselfFun
<LI><a href="#[2836d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcesBoadcast
<LI><a href="#[2836db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_si4432_HW
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c10430]"></a>SlaveAddrPoll</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fmc_data_flash.o(i.SlaveAddrPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SlaveAddrPoll &rArr; SaveUserSlaveRfChl
</UL>
<BR>[Calls]<UL><LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c103f4]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m051series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[283ca88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c107b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[283d9c4]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m051series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[28409d0]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[28c464c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0c59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[1c0c59c]"></a>TIMER_Open</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[28409d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[2839590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
</UL>

<P><STRONG><a name="[1c0c68c]"></a>TMR1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, porttimer.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler &rArr; prvvTIMERExpiredISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[2839734]"></a>TMR2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, uart3th.o(i.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2839608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1c0dc58]"></a>UART0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, portserial.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; prvvUARTTxReadyISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0e2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[1c0e324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28396f8]"></a>UART1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, uart3th.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28395cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersEnable
<LI><a href="#[28396bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1c103b8]"></a>UART_Open</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[283ef18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[283e93c]"></a>UART_Write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2SendCmd
<LI><a href="#[1c1064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[28c2e28]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[28c3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c77784]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mb.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[2836c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
</UL>

<P><STRONG><a name="[28c266c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28c2630]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28c25f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2836c50]"></a>clr_interruput_si4432</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, si4432.o(i.clr_interruput_si4432))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_interruput_si4432 &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[2836cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>

<P><STRONG><a name="[1c0ac88]"></a>crc_ccitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mbcrc.o(i.crc_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[1c08a8c]"></a>eBTFuncReadHoldingRegister</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, btfunc.o(i.eBTFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eBTFuncReadHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c1037c]"></a>eMBEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c083fc]"></a>eMBFuncReadCoils</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c07f10]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c07754]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c0731c]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c07718]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c06a70]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[28c4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c083c0]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c076dc]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c08384]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c076a0]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c08a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1c10340]"></a>eMBInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1c0f2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c10304]"></a>eMBPoll</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPoll &rArr; peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1c0f29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[1c0f314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
<LI><a href="#[1c77784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c092fc]"></a>eMBRTUInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1c092c0]"></a>eMBRTUReceive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0ac4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c09284]"></a>eMBRTUSend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0ac4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1c0dbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c09248]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRTUStart &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1c0dbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c0920c]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1c0dbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c0b444]"></a>eMBRegCoilsCB</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, user_mb_app.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0b2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1c0b2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1c0b318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1c0b354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c08384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1c083c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1c083fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[1c0b408]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, user_mb_app.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0b2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1c0b2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1c0b318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1c0b354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c07f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[1c0b3cc]"></a>eMBRegHoldingCB</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, user_mb_app.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0b318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1c0b354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c076a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1c076dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1c07718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1c07754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[1c0b390]"></a>eMBRegInputCB</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, user_mb_app.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0b318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1c0b354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0731c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[1c102c8]"></a>initsi4432</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, si4432.o(i.initsi4432))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initsi4432 &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[1c70e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[2836cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1073c]"></a>main</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; Blux_v3bPoll &rArr; B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1c102c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[1c10304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[1c10340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[1c1037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[1c10430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
<LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
<LI><a href="#[1c104e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[1c10520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBLUX_V30
<LI><a href="#[1c1055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWRealyInit
<LI><a href="#[1c10598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11EventPoll
<LI><a href="#[1c10610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2SendCmd
<LI><a href="#[1c1064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
<LI><a href="#[1c10688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2EventPoll
<LI><a href="#[1c10700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blux_v3bPoll
<LI><a href="#[1c107b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1c091d0]"></a>peBTFrameSendCur</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mbrtu.o(i.peBTFrameSendCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ccitt
<LI><a href="#[1c0dbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[28c4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c10304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1c08a50]"></a>prveMBError2Exception</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[1c0731c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[1c076a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1c076dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1c07718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1c07754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[1c07f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[1c08384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1c083c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1c083fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
<LI><a href="#[1c08a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBTFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[1c1028c]"></a>rx_data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, si4432.o(i.rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_data &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2836b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[2836c14]"></a>save_rec_data</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, si4432.o(i.save_rec_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = save_rec_data &rArr; rx_data &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[2836bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
<LI><a href="#[2836c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[2836d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[2836bd8]"></a>spi_byte</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, si4432.o(i.spi_byte))
<BR><BR>[Called By]<UL><LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[2836b9c]"></a>spi_rw</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, si4432.o(i.spi_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1c102c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[2836b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[2836c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[2836c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[2836c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
<LI><a href="#[2836cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
<LI><a href="#[2836d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
<LI><a href="#[2836db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_si4432_HW
</UL>

<P><STRONG><a name="[2836b60]"></a>tx_data</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, si4432.o(i.tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tx_data &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1c107f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[2836b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[2836cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[1c0b354]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.ucMBMasterGetDestAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1c0b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1c0b408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1c0ac4c]"></a>usMBCRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1c09284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1c092c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[1c0dbe0]"></a>vMBPortSerialEnable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1c0911c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1c091d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1c0920c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1c09248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1c09284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[1c0c650]"></a>vMBPortTimersDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1c09158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1c0920c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[1c0c614]"></a>vMBPortTimersEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1c0ca10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1c0ca88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c09194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[1c09248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[28396bc]"></a>x3THPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[28396f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[2839680]"></a>x3THPortSerialInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart3th.o(i.x3THPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0dab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1c0daf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1c103b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1c104a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[2839c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[2839c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[2839608]"></a>x3THPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[2839734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[28395cc]"></a>x3THPortTimersEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[28396f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[2839590]"></a>x3THPortTimersInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart3th.o(i.x3THPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x3THPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[2839c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[2839c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[1c0b318]"></a>xMBMasterGetCBRunInMasterMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.xMBMasterGetCBRunInMasterMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c0b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1c0b3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1c0b408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1c0f314]"></a>xMBPortEventGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[1c10304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1c0f2d8]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c10340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1c0f29c]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[1c0911c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1c09158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1c10304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1c0dba4]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[1c09194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[1c0db68]"></a>xMBPortSerialInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0dab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1c0daf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1c0e360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1c0fc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1c0fcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1c103b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1c104a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1c0db2c]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[1c0911c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[1c0c5d8]"></a>xMBPortTimersInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1c0c9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1c0ca10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1c0ca4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1c0ca88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c092fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1c09194]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1c0dba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c09158]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0c650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1c0f29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c0911c]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTransmitFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0db2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[1c0dbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1c0f29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1c0b2dc]"></a>xMBUtilGetBits</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0b408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1c0b2a0]"></a>xMBUtilSetBits</STRONG> (Thumb, 80 bytes, Stack size 44 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0b408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1c0b444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c0e360]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, portserial.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[1c0e324]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0dc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1c0e2e8]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0dc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1c0ca88]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, porttimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1c0c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1c0ca4c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, porttimer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[1c0ca10]"></a>TIMER_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1c0c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1c0c9d4]"></a>TIMER_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1c0c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1c0c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1c0c998]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0c68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[283ef18]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c103b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[283daf0]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[283ca88]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, system_m051series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c103f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[2839c98]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2839590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[2839c5c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart3th.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2839590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[2839680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[28c5060]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fmc_data_flash.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[28c4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[28c4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
